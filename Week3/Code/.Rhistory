cd
m=matrix(data, nrow = rows, ncol = cols)
m=matrix(data, nrow = rows, ncol = cols)
a=2
a
a=(1,2,3,2,)
a=(1,2,3,2)
a=91,2,3,2)
a=（1,2,3,2）
a=(1,2)
a=as.matrix(1,2,3)
a
setwd()
setwd("/Users/tisssu/Documents/CMEECourseWork/Week3/Code/")
library("maps")
library("ggplot2")
load("../Data/GPDDFiltered.RData")
map("world")
attach(gpdd)
gpdd_map = ggplot(data=gpdd) + borders(colour='darkgrey') + geom_point(mapping =  aes(x=long,y=lat))
gpdd_map
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)
View(MyMetaData)
head(M)
head(MyData)
install.packages("reshape2")
?melt
?melt()
library(reshape2)
?melt
install.packages("dplyr")
install.packages("tidyr")
x = c(2,3,4,5,)
x = c(2,3,4,5)
y=c(1,2,3,4)
union(x,y)
intersect(x,y)
setdiff(x,y)
setdiff(y,x)
s.elemment(x,y)
dnorm(x, m=0,sd =1)
?dnorm
source("TreeHeight.R")
?commendArgs
?commandArgs
rm(list=lm())
args= commandArgs()
args
args=commandArgs()
print("args")
print(args)
args=commandArgs()
print(args)
word = ../d/tree.csv
word = "../d/tree.csv"
basename(word)
substr(basename(word),1,nchar(word)-4)
substr(basename(word), 1,nchar(word)-4)
substr(basename(word), 1,3)
substr(basename(word), 1, nchar(word)-4)
substr(basename(word), 1, (nchar(word)-4))
substr(basename(word), 1, (nchar(word)-1))
nchar(word)
substr(basename(word), 1,nchar(basename(word)))
substr(basename(word), 1,nchar(basename(word))-4)
?paste
Sys.time()
a = 1
for (i in 1:1000000)
{a[i]=10}
Sys.time()
system.time()
a = 1
for (i in 1:1000000)
{a[i]=10}
system.time()
system.time(
a = 1
for (i in 1:1000000)
{a[i]=10}
)
?system.time
install.packages("dplyr")
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)
library("dplyr")
library("tidyr")
?str()
dplyr::tbl_df(MyData)
#change the "" with 0
MyData[MyData == ""] = 0
# head the data
dplyr::tbl_df(MyData)
getwd
getwd()
rm(list = ls())
setwd("/Users/tisssu/Documents/StatsWithSparrows/Code")
getwd()
d = read.table("../Data/SparrowSize.txt",header = Tre)
d = read.table("../Data/SparrowSize.txt",header = True)
d = read.table("../Data/SparrowSize.txt",header = T)
str(d)
names(d)
head(d)
?par
par(mfrow = c(2, 2))
hist(d$Tarsus, breaks = 3, col="grey") hist(d$Tarsus, breaks = 10, col="grey") hist(d$Tarsus, breaks = 30, col="grey") hist(d$Tarsus, breaks = 100, col="grey")
hsit
hist(d$Tarsus)
par(mfrow = c(2,2))
var(d$Bill,na.rm = T)
par(mfrow = c(2,2))
hist(d$Tarsus, breaks =3, col = "grey")
hist(d$Tarsus, breaks = 10, col = "grey")
hist(d$Tarsus, breaks = 30, col = "grey")
hist(d$Tarsus, breaks = 100, col = "grey")
?par
install.packages("modeest")
?modeest
require("modeest")
?modeest
library(help="modeest")
?sd
sd(d$Bill,na.rm = T)
length(d$Wing)
length(d$Wing,na.rm)
length(d$Wing,na.rm=T)
var(d$Wing)
var(d$Wing,na.rm =T)
range(d$Bill)
range(d$Bill,na.rm=T)
length(d$Bill,na.rm=T)
attach(d)
mean(Wing, na.rm = T)
length(Wing)
？length
?length
lengths(d)
getwd()
rm(list = lm())
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(24,26)
a <- NA
system.time(for (i in 1:100000) {a <- c(a, i)})
print(a)
a <- NA
for (i in 1:100000) {a <- c(a, i)}
print(a)
a <- rep(NA, 1000000)
for (i in 1:1000000) {
a[i] <- i
}
print(a)
a =c(a,2)
a
a = c(a,2)
a=c(NA,2)
a
a <- NA
for (i in 1:100000) {a <- c(a, i)}
print(a)
a <- rep(NA, 1000000)
system.time(for (i in 1:1000000) {a[i] <- i})
print(a)
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)) #loop through the populations
{
for (yr in 2:numyears) #for each pop, loop through the years
{
N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
}
}
return(N)
}
stochrick()
N
stochrick()
N<-matrix(NA,numyears,length(p0))
stochrickvect = function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears)
{
N[yr,] = N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
stochrickvect = function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears)
{
N[yr,] = N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
q
stochrickvect = function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (yr in 2:numyears)
{
N[yr,] = N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
}
return(N)
}
stochrickvect()
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
View(res2)
## run a simulation that involves sampling from a population with try
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
## Try using "try" with vectorization:
result <- lapply(1:100, function(i) try(doit(x), FALSE))
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- try(doit(x), FALSE)
}
View(result)
?unique
x <- rnorm(50)
x <- sample(x, replace = TRUE)
x <- sample(x, replace = TRUE)
x <- sample(x, replace = TRUE)
x <- sample(x, replace = TRUE)
x <- sample(x, replace = TRUE)
x
?try
## run a simulation that involves sampling from a population with try
x <- rnorm(50) #Generate your population
doit <- function(x){
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) {#only take mean if sample was sufficient
print(paste("Mean of this sample was:", as.character(mean(x))))
}
else {
stop("Couldn't calculate mean: too few unique points!")
}
}
## Try using "try" with vectorization:
result <- lapply(1:100, function(i) try(doit(x), FALSE))
## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
result[[i]] <- doit(x)
}
runif(10)
getwd()
rm(list = ls())
setwd("/Users/tisssu/Documents/CMEECourseWork/Week3/Code")
getwd()
library("dplyr")
library("tidyr")
# input the dataset
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)
# head the data
dplyr::tbl_df(MyData)
#change the "" with 0
MyData[MyData == ""] = 0
dplyr::tbl_df(MyData)
colnames(MyData)
MyData <- t(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
colnames(TempData) <- MyData[1,] # assign column names from original data
rownames(TempData) <- NULL
head(TempData)
?tidyr::gather
colnames(MyData)
colnames(TempData)
tidyr::gather(TempData,k= "Cultivation", "Block", "Plot", "Quadrat",value = species)
tidyr::gather(TempData,k= "Cultivation", "Block", "Plot", "Quadrat")
tidyr::gather(TempData,k= 5:45)
tidyr::gather(TempData,k= Cultivation)
tidyr::gather(TempData,k= Cultivation,Block,Plot,Quadrat)
head(TempData)
library("dplyr")
library("tidyr")
# input the dataset
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)
# head the data
dplyr::tbl_df(MyData)
#change the "" with 0
MyData[MyData == ""] = 0
MyData <- t(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
colnames(TempData) <- MyData[1,] # assign column names from original data
rownames(TempData) <- NULL
View(TempData)
tidyr::gather(TempData,k= Cultivation,Block,Plot,Quadrat)
View(TempData)
View(TempData)
dim(TempData)
tidyr::gather(TempData,k= Cultivation,Block,Plot,Quadrat,...= 5:45)
View(TempData)
MyWrangledData = tidyr::gather(TempData,k= Cultivation,Block,Plot,Quadrat,...= 5:45)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,"Cultivation","Block","Plot","Quadrat")
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation,Block,Plot,Quadrat)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation,Block,Plot,Quadrat)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation,Block)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation,Block,Plot)
View(MyWrangledData)
MyWrangledData = tidyr::gather(TempData,Cultivation,Block)
MyWrangledData = tidyr::gather(TempData,k=Cultivation,Block,Plot)
MyWrangledData = tidyr::gather(TempData,k=Cultivation,Block)
MyWrangledData = tidyr::gather(TempData,k=Species,value=Count,-Cultivation,-Block,-Plot,-Quadrat)
View(MyWrangledData)
library("dplyr")
library("tidyr")
# input the dataset
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)
# head the data
dplyr::tbl_df(MyData)
#change the "" with 0
MyData[MyData == ""] = 0
MyData <- t(MyData)
colnames(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
colnames(TempData) <- MyData[1,] # assign column names from original data
rownames(TempData) <- NULL
MyWrangledData = tidyr::gather(TempData,k=Species,value=Count,-Cultivation,-Block,-Plot,-Quadrat)
head(TempData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
View(MyWrangledData)
getwd()
setwd("/Users/tisssu/Documents/StatsWithSparrows/Code")
rm(list = ls())
d = read.table("../Data/SparrowSize.txt")
setwd("/Users/tisssu/Documents/CMEECourseWork/Week3/Code")
source("GDPP_map.R")
library("maps")
library("ggplot2")
load("../Data/GPDDFiltered.RData")
map("world")
attach(gpdd)
gpdd_map = ggplot(data=gpdd) + borders(colour='darkgrey') + geom_point(mapping =  aes(x=long,y=lat))
gpdd_map
View(d)
View(gpdd)
source("TAutoCorr.R")
install.packages("knitr")
