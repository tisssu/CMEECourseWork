Starting weekly assessment for Yuheng, Week3

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 99.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, Week5, Week2, Week9, Week4, .git, Week3, Project

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
# Created by https://www.gitignore.io/api/macos

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# End of https://www.gitignore.io/api/macos










# Created by https://www.gitignore.io/api/latex

### LaTeX ###
## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

### LaTeX Patch ###
# glossaries
*.glstex


# End of https://www.gitignore.io/api/latex






# Created by https://www.gitignore.io/api/r

### R ###
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/

### R.Bookdown Stack ###
# R package: bookdown caching files
/*_files/


# End of https://www.gitignore.io/api/r

**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

#1 Content
The Week1 homework, containing all week1 script and data file.


#2 Installation
Don't need installation.

#3 Example usage
dyn3177-209:Code tisssu$ bash boilerplate.sh

This is a shell script

#4 Environment
Run under linux or macos

#5 Version
1.00 , first version 

#6 Author information
Wang YuHeng 
yuheng.wang18.imperial.ac.uk

##############
update in Week2
#############

#1 content
The Week2's homework, containing all week2 script and data file and result.

#2 Example usage
python3 align_seqs_better.py

#3 Environment
Run under linux or macos

#4 Version
1.10 , second version 

##############
update in Week3
#############

#1 content
The Week3's homework, containing all week3's script and data file and result.

#2 Example usage
Rscript get_TreeHeight.R

#3 Environment
R 3.5.1, python 3.7.0

#4 Version
1.20 , the third version.

##############
update in Week7
#############

#1 content 
The week7's assignment, containing all week7's script and data file and result. And part of miniproject.

#2 Example usage
python3 TestR.py

#3 Environment
R 3.5.1, python 3.7.0

#4 Version
1.30 , the fourth version.

##############
update in Week10
#############

#1 content (This is the last version of coursework except miniproject and HPC exercises)

1. add project proposal

2. add one extra credit problem in week7

3. move things in week4,5 to this repository

4. add mini project to this repository

5. add HPC exercises to this repository

#2 Environment
R 3.5.1, python 3.7.0, QGIS 3.41

#3 Version
1.40 , the fifth version.**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week3 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK3...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
#################
script:DataWrangTidy.R
function: data wranging with tidyr and dplyr
##################

#################
script:Vectorize1.R 
function: vectorize data 
##################

#################
script:boilerplate.R
function: as a boilerplate
##################

#################
script:preallocate.R
function: compare differences between whether preallocate data in R
##################

#################
script:GDPP_map.R 
function: Making the gpdd data map
##################

#################
script:Vectorize1.py
function: vectorize calculation in python
##################

#################
script:break.R
function: testing break command in R
##################

#################
script:run_get_TreeHeight.sh
function: shell script to run get_treeHeight.R and get_TreeHeight.py
##################

#################
script:TAutoCorr.R
function: recognize whether year temperature significantly correlate with next year
##################

#################
script:Vectorize2.R
function: Vectorize calculation in R
##################

#################
script:browse.R
function:  insert a breakpoint in R script
##################

#################
script:sample.R
function: test sample command in R
##################

#################
script:Vectorize2.py
function: Vectorize calculation in python
##################

#################
script:control.R
function: control flow in R
##################

#################
script:time_compare.sh
function: comparaing the time of Vectorize1,Vectorize2 in R and Python seperately
##################

#################
script:apply1.R,apply2.R
function: test apply command in R
##################

#################
script:get_TreeHeight.R
function: get data from tree.csv and calculate the tree height in R
##################

#################
script:get_TreeHeight.py
function: get data from tree.csv and calculate the tree height in python
##################

#################
script:try.R
function: test trying function in R
##################

#################
script:TreeHeight.R 
function: calculate the tree height with tree.csv data
##################

#################
script: basic_io.R 
function: test basic input and output in R
##################

#################
script: next.R
function: test next command in R
##################

#################
script: compile_TAutoCorr.sh
function: complie the TAutoCorr.tex into pdf file
##################

#################
script: TAutoCorr.tex
function: result and interpretation of TAutoCorr.R in latex file
##################

################
script: Girko.R
function: test Girko's circus law
##################

#################
script: PlotLin.R
function: plot regression
##################

#################
script: PP_Lattice.R
function: plot lattice graphics
##################

#################
script: PP_Regress.R
function: plot certain regression
##################**********************************************************************

Found following files in results directory: TreeHts.csv,  trees _treeheights.csv, trees_treeheights_py.csv, Girko.pdf, PP_Results.csv, PP_Regress_Results.csv, PP_Regress.pdf, Pred_Lattice.pdf, Prey_Lattice.pdf, MyLinReg.pdf, TAutoCorr.pdf, SizeRatio_Lattice.pdf, MyData.csv...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 29 code files: browse.R, PP_Regress.R, Vectorize2.py, apply1.R, sample.R, run_get_TreeHeight.sh, get_TreeHeight.py, compile_TAutoCorr.sh, boilerplate.R, TreeHeight.R, PP_Lattice.R, PlotLin.R, next.R, Girko.R, Vectorize1.R, time_compare.sh, break.R, basic_io.R, GDPP_map.R, Vectorize1.py, try.R, apply2.R, get_TreeHeight.R, TAutoCorr.R, Vectorize2.R, DataWrangTidy.R, preallocate.R, TAutoCorr.tex, control.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file browse.R...

File contents are:
**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10){
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations){
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")**********************************************************************

Testing browse.R...

Output (only first 500 characters): 

**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.25031s

======================================================================
Inspecting script file PP_Regress.R...

File contents are:
**********************************************************************
library(ggplot2)
library(dplyr)
library(tidyr)

MyDF = read.csv("../Data/EcolArchives-E089-51-D1.csv")
p = ggplot(MyDF,aes(x = log(Prey.mass), y = log(Predator.mass), color = Predator.lifestage)) + geom_point(shape = I(3))
p = p +facet_grid(Type.of.feeding.interaction~.) + geom_smooth(method = lm,fullrange = T)
p = p + scale_x_continuous("Prey Mass in grams") +scale_y_continuous("Predator Mass in grams")
p = p + theme(legend.position = "bottom") 
pdf("../Results/PP_Regress.pdf")
p 
dev.off()

# group the dataset by feeding type
insecDF = MyDF %>% filter(Type.of.feeding.interaction == "insectivorous")
pisciDF = MyDF %>% filter(Type.of.feeding.interaction == "piscivorous")
plankDF = MyDF%>% filter(Type.of.feeding.interaction == "planktivorous")
predaDF = MyDF %>% filter(Type.of.feeding.interaction == "predacious")
pre_pisDF = MyDF %>% filter(Type.of.feeding.interaction == "predacious/piscivorous")

# build function to make the table
make_table = function(input)
{
  output = rep(NA,5)
  model = summary(lm(log(Prey.mass)~log(Predator.mass),data = input))
  output[1] = model$coefficients[2,1]
  output[2] = model$coefficients[1,1]
  output[3] = model$r.squared[1]
  output[4] = model$fstatistic[1]
  output[5] = model$coefficients[2,4]
  output = return(output)
}

# linear regregation by predator life satge
#insectivorous
insecDF %>% group_by(Predator.lifestage) %>% summarise()
la_ju_in = make_table(insecDF)

# piscivorous
pisciDF %>% group_by(Predator.lifestage) %>% summarise()
adult_pisciDF = pisciDF %>% filter(Predator.lifestage == "adult")
ad_pi = make_table(adult_pisciDF)
juve_pisciDF = pisciDF %>% filter(Predator.lifestage == "juvenile")
ju_pi = make_table(juve_pisciDF)
la_ju_pisciDF = pisciDF %>% filter(Predator.lifestage == "larva / juvenile")
la_ju_pi = make_table(la_ju_pisciDF)
post_pisciDF = pisciDF %>% filter(Predator.lifestage == "postlarva")
po_pi = make_table(post_pisciDF)
po_ju_pisciDF = pisciDF %>% filter(Predator.lifestage == "postlarva/juvenile")
po_ju_pi = make_table(po_ju_pisciDF)

#planktivorous
plankDF %>% group_by(Predator.lifestage) %>% summarise()
adult_plankDF = plankDF %>% filter(Predator.lifestage == "adult")
ad_pl = make_table(adult_plankDF)
juve_plankDF = plankDF %>% filter(Predator.lifestage == "juvenile")
ju_pl = make_table(juve_plankDF)
la_plankDF = plankDF %>% filter(Predator.lifestage == "larva")
la_pl = make_table(la_plankDF)
la_ju_plankDF = plankDF %>% filter(Predator.lifestage == "larva / juvenile")
la_ju_pl = make_table(la_ju_plankDF)
po_ju_plankDF = plankDF %>% filter(Predator.lifestage == "postlarva/juvenile")
po_ju_pl = make_table(po_ju_plankDF)

#predacious
predaDF %>% group_by(Predator.lifestage) %>% summarise()
adult_predDF = predaDF %>% filter(Predator.lifestage == "adult")
ad_pr = make_table(adult_predDF)
juve_predDF = predaDF %>% filter(Predator.lifestage == "juvenile")
ju_pr = make_table(juve_predDF)
la_predDF = predaDF %>% filter(Predator.lifestage == "larva")
la_pr = make_table(la_predDF)
la_ju_predDF = predaDF %>% filter(Predator.lifestage == "larva / juvenile")
la_ju_pr = make_table(la_ju_predDF)
post_predDF = predaDF %>% filter(Predator.lifestage == "postlarva")
po_pr = make_table(post_predDF)
po_ju_predDF = predaDF %>% filter(Predator.lifestage == "postlarva/juvenile")
po_ju_pr = make_table(po_ju_predDF)

#predacious/piscivorous
pre_pisDF %>% group_by(Predator.lifestage) %>% summarise()
adult_pre_piDF = pre_pisDF %>% filter(Predator.lifestage == "adult")
ad_pr_pi = make_table(adult_pre_piDF)

PP_results = rbind(la_ju_in, ad_pi, ju_pi, la_ju_pi, po_pi, po_ju_pi, ad_pl, ju_pl, la_pl, la_ju_pl, po_ju_pl,
      ad_pr, ju_pr, la_pr, la_ju_pr, po_pr, po_ju_pr, ad_pr_pi)
colnames(PP_results) = c("slope", "intercept", "R^2", "F-value", "P-value")
write.csv(PP_results,"../Results/PP_Regress_Results.csv")
**********************************************************************

Testing PP_Regress.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 
# A tibble: 1 x 1
  Predator.lifestage
  <fct>             
1 larva / juvenile  
# A tibble: 5 x 1
  Predator.lifestage
  <fct>             
1 adult             
2 juvenile          
3 larva / juvenile  
4 postlarva         
5 postlarva/juvenile
# A tibble: 5 x 1
  Predator.lifestage
  <fct>             
1 adult             
2 juvenile          
3 larva             
4 larva / juvenile  
5 postlarva/juvenile
# A tibble: 6 x 1
  Predator.lifestage
  <fct>             
1 ad
**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
In qt((1 - level)/2, df) : NaNs produced

======================================================================
Inspecting script file Vectorize2.py...

File contents are:
**********************************************************************
""" This script is to make python version of vectorize2.R,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""

import math
import numpy
def stochrick(p0 = numpy.random.uniform(0.5,1.5,size=1000),r=1.2,K=1,sigma=0.2,numyears=100):
    """ Test vectorization """
    N = numpy.empty((numyears,len(p0)))
    N[1,] = p0
    for pop in range(1,len(p0)):
        for yr in range(2,numyears):
            N[yr,pop] = N[yr-1,pop]*math.exp(r*(1-N[yr-1,pop]/K)+numpy.random.normal(0,sigma,1))
    return(N)

#vectorize
import math
import numpy
def stochrickvect(p0 = numpy.random.uniform(0.5,1.5,size=1000),r=1.2,K=1,sigma=0.2,numyears=100):
    """ test vectorization """
    N = numpy.empty((numyears,len(p0)))
    N[1,] = p0
    for yr in range(2,numyears):
        N[yr,] = N[yr-1,]*numpy.exp(r*(1-N[yr-1,]/K)+numpy.random.normal(0,sigma,1))
    return(N)

res2 = stochrickvect()**********************************************************************

Testing Vectorize2.py...

Vectorize2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.24636s

======================================================================
Inspecting script file apply1.R...

File contents are:
**********************************************************************
## apply: applying the same function to rows/colums of a matrix

## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 

**********************************************************************
 [1] -0.435044852 -0.127373775  0.035747430  0.154938146 -0.301957938
 [6]  0.043161017 -0.260054219 -0.255950111  0.199111530  0.002876332
 [1] 2.0912002 1.0230948 0.4911254 1.6075477 1.2589211 1.0811070 2.4554633
 [8] 1.8172367 0.9216235 0.6752543
 [1]  0.09808935 -0.11655860 -0.37335614 -0.47524946 -0.23872555  0.72989122
 [7] -0.01137406  0.51827752 -0.17628060 -0.89926013

**********************************************************************

Code ran without errors

Time consumed = 0.06955s

======================================================================
Inspecting script file sample.R...

File contents are:
**********************************************************************
## run a simulation that involves sampling from a population

x <- rnorm(50) #Generate your population
doit <- function(x){
  x <- sample(x, replace = TRUE)
  if(length(unique(x)) > 30) { #only take mean if sample was sufficient
    print(paste("Mean of this sample was:", as.character(mean(x))))
  } 
}

## Run 100 iterations using vectorization:
result <- lapply(1:100, function(i) doit(x))

## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
  result[[i]] <- doit(x)
}





**********************************************************************

Testing sample.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.196238402413822"
[1] "Mean of this sample was: -0.135339777448457"
[1] "Mean of this sample was: -0.216418206542052"
[1] "Mean of this sample was: -0.0607299840971679"
[1] "Mean of this sample was: -0.0958076269627381"
[1] "Mean of this sample was: -0.312243509089377"
[1] "Mean of this sample was: -0.156507868556441"
[1] "Mean of this sample was: 0.0532929931705317"
[1] "Mean of this sample was: -0.156678510373523"
[1] "Mean of this sample was: -0.437488730990606"
**********************************************************************

Code ran without errors

Time consumed = 0.10482s

======================================================================
Inspecting script file run_get_TreeHeight.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Wang YuHeng yuheng.wang18@imperial.ac.uk
# Script: run_get_TreeHeight.sh
# Desc:test the get_TreeHeight.R script in unix
# Argument: none
# Date: Oct 2018 

#run the script of R
Rscript get_TreeHeight.R ../Data/trees.csv


# run the script of python
python3 get_TreeHeight.py ../Data/trees.csv**********************************************************************

Testing run_get_TreeHeight.sh...

Output (only first 500 characters): 

**********************************************************************
[1] "Tree height is: 27.8021161438536"
[1] "Tree height is: 45.2460250644405"
[1] "Tree height is: 14.6654828109493"
[1] "Tree height is: 14.9341751666304"
[1] "Tree height is: 35.9703591412599"
[1] "Tree height is: 32.4102133664874"
[1] "Tree height is: 17.4582436344144"
[1] "Tree height is: 30.1373803987097"
[1] "Tree height is: 20.3124778877177"
[1] "Tree height is: 24.4316633466933"
[1] "Tree height is: 27.5021323376702"
[1] "Tree height is: 25.1559006982628"
[1] "Tree height is: 29.392479642
**********************************************************************

Code ran without errors

Time consumed = 0.13731s

======================================================================
Inspecting script file get_TreeHeight.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

""" This scdript is to get external file, calculating the tree height and output it into external file,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

import math
import sys
import csv
import os.path
import os

# define the function to calculating the tree height
def TreeHeight(degrees, distance):
    """ calculate tree height """
    radians = degrees * math.pi / 180
    height = distance * math.tan(radians)
    print("Tree height is:", height)
    return height

# get the system argument
args = sys.argv[1:]

# read the csv table
MyData = []
with open(args[0],"r") as f:
    readcsv = csv.reader(f)
    for line in readcsv:
        MyData.append(line)

# calculate the height
MyData[0].append("Tree.Height.m")
for i in range(1,len(MyData)):
    MyData[i].append(TreeHeight(float(MyData[i][2]),float(MyData[i][1])))

with open("../Results/"+os.path.splitext(os.path.basename(args[0]))[0]+"_treeheights_py.csv","w") as g:
    csvwrite = csv.writer(g)
    for line in MyData:
        csvwrite.writerow(line)

**********************************************************************

Testing get_TreeHeight.py...

get_TreeHeight.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "get_TreeHeight.py", line 34, in <module>
    with open(args[0],"r") as f:
IndexError: list index out of range

======================================================================
Inspecting script file compile_TAutoCorr.sh...

File contents are:
**********************************************************************
#!/bin/bash
pdflatex TAutoCorr.tex
pdflatex TAutoCorr.tex

evince TAutoCorr.pdf &

## Cleanup
rm *~
rm *.aux
rm *.dvi
rm *.log
rm *.nav
rm *.out
rm *.snm
rm *.toc**********************************************************************

Testing compile_TAutoCorr.sh...

Output (only first 500 characters): 

**********************************************************************
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./TAutoCorr.tex
LaTeX2e <2016/02/01>
Babel <3.9q> and hyphenation patterns for 81 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
No file TAutoCorr.aux.
[1{/var/lib/texmf/fonts/map/pdftex/u
**********************************************************************

Encountered error:
rm: cannot remove '*~': No such file or directory
rm: cannot remove '*.dvi': No such file or directory
rm: cannot remove '*.nav': No such file or directory
rm: cannot remove '*.out': No such file or directory
rm: cannot remove '*.snm': No such file or directory
rm: cannot remove '*.toc': No such file or directory

======================================================================
Inspecting script file boilerplate.R...

File contents are:
**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2){
  
  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
  
  return (c(Arg1, Arg2)) #this is optional, but very useful
}

MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.17732s

======================================================================
Inspecting script file TreeHeight.R...

File contents are:
**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  
  return (height)
}

MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers
Tree.Height.m = array(0,dim(MyData[1]))
for (i in 1:dim(MyData)[1])
{
  Tree.Height.m[i]=TreeHeight(MyData[i,3],MyData[i,2])
}

# combine the dataframe and new height data
MyData=cbind(MyData,Tree.Height.m)

# output the dataframe with height column to TreeHts.csv file
write.csv(MyData, "../Results/TreeHts.csv",row.names = FALSE) # write row names
**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Tree height is: 27.8021161438536"
[1] "Tree height is: 45.2460250644405"
[1] "Tree height is: 14.6654828109493"
[1] "Tree height is: 14.9341751666304"
[1] "Tree height is: 35.9703591412599"
[1] "Tree height is: 32.4102133664874"
[1] "Tree height is: 17.4582436344144"
[1] "Tree height is: 30.1373803987097"
[1] "Tree height is: 20.3124778877177"
[1] "Tree height is: 24.4316633466933"
[1] "Tree height is: 27.5021323376702"
[1] "Tree height is: 25.1559006982628"
[1] "Tree height is: 29.392479642
**********************************************************************

Code ran without errors

Time consumed = 0.20646s

======================================================================
Inspecting script file PP_Lattice.R...

File contents are:
**********************************************************************
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
library(dplyr)
library(tidyr)

# Draw lattice graphes
pdf("../Results/Pred_Lattice.pdf",11.7,8.3)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
dev.off()
pdf("../Results/Prey_Lattice.pdf",11.7,8.3)
densityplot(~log(Prey.mass) | Type.of.feeding.interaction, data = MyDF)
dev.off()
pdf("../Results/SizeRatio_Lattice.pdf",11.7,8.3)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data = MyDF)
dev.off()

# Calculating the logarithm of Prey mass, Predaotr mass and Pred_prey mass ratio
Pred_Prey_massratio=log(MyDF$Prey.mass/MyDF$Predator.mass)
MyDF = cbind(MyDF,Pred_Prey_massratio)
Pred_logarithm = log(MyDF$Predator.mass)
Prey_logarithm = log(MyDF$Prey.mass)
MyDF =cbind(MyDF,Pred_logarithm)
MyDF = cbind(MyDF,Prey_logarithm)

#calculate the logarithm prey mass, predator mass, pred_prey mass ratio median and mean by feed type
Predator_mean = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Predator_Mean = mean(Pred_logarithm)) 
Predator_median = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Predator_Median = median(Pred_logarithm))
Prey_mean = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Prey_Mean = mean(Prey_logarithm)) 
Prey_median = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Prey_Median = median(Prey_logarithm))
Massratio_mean = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Ratio_Mean = mean(Pred_Prey_massratio)) 
Massratio_median = MyDF %>% group_by(Type.of.feeding.interaction) %>% summarise(Ratio_Median = median(Pred_Prey_massratio))

#combine the table
Mean = dplyr::full_join(Massratio_mean,Predator_mean,by = "Type.of.feeding.interaction")
Mean = dplyr::full_join(Mean,Prey_mean,by = "Type.of.feeding.interaction")
Median = dplyr::full_join(Massratio_median,Predator_median,by = "Type.of.feeding.interaction")
Median = dplyr::full_join(Median,Prey_median,by = "Type.of.feeding.interaction")
pp_Results = dplyr::full_join(Mean,Median,by = "Type.of.feeding.interaction")

# output the results table
write.table(pp_Results,"../Results/PP_Results.csv",col.names = T,row.names = F)
**********************************************************************

Testing PP_Lattice.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 
null device 
          1 
null device 
          1 

**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


======================================================================
Inspecting script file PlotLin.R...

File contents are:
**********************************************************************
library(ggplot2)
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")
pdf("../Results/MyLinReg.pdf")
p
dev.off()
**********************************************************************

Testing PlotLin.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Code ran without errors

Time consumed = 1.04257s

======================================================================
Inspecting script file next.R...

File contents are:
**********************************************************************
for (i in 1:10) {
  if ((i %% 2) == 0) 
    next # pass to next iteration of loop 
  print(i)
}**********************************************************************

Testing next.R...

Output (only first 500 characters): 

**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.08659s

======================================================================
Inspecting script file Girko.R...

File contents are:
**********************************************************************
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
pdf("../Results/Girko.pdf")
p
dev.off()**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in ggplot(eigDF, aes(x = Real, y = Imaginary)) : 
  could not find function "ggplot"
Execution halted

======================================================================
Inspecting script file Vectorize1.R...

File contents are:
**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M){
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]){
    for (j in 1:Dimensions[2]){
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}

## This on my computer takes about 1 sec
print(system.time(SumAllElements(M)))
## While this takes about 0.01 sec
print(system.time(sum(M)))**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 

**********************************************************************
   user  system elapsed 
  0.108   0.000   0.108 
   user  system elapsed 
  0.000   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.26360s

======================================================================
Inspecting script file time_compare.sh...

File contents are:
**********************************************************************
#!/bin/bash
# Author: Wang YuHeng
# function: calculate the time of Vectorize1.R, Vectorize2.R, Vectorize1.py, Vectorize2.py
# Argument: none

#calculate the time of Vectorize1.R
echo "the time of Vectorize1.R"
time Rscript Vectorize1.R

#calculate the time of Vectorize1.py
echo "the time of Vectorize1.py"
time python3 Vectorize1.py

#calculate the time of Vectorize2.R
echo "the time of Vectorize2.R"
time Rscript Vectorize2.R

#calculate the time of Vectorize2.py
echo "the time of Vectorize2.py"
time python3 Vectorize2.py

**********************************************************************

Testing time_compare.sh...

Output (only first 500 characters): 

**********************************************************************
the time of Vectorize1.R
   user  system elapsed 
  0.100   0.000   0.099 
   user  system elapsed 
  0.000   0.004   0.001 
the time of Vectorize1.py
the time of Vectorize2.R
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.040   0.004   0.044 
the time of Vectorize2.py

**********************************************************************

Encountered error:

real	0m0.268s
user	0m0.244s
sys	0m0.016s

real	0m0.155s
user	0m0.200s
sys	0m0.236s

real	0m0.119s
user	0m0.096s
sys	0m0.016s

real	0m0.140s
user	0m0.204s
sys	0m0.228s

======================================================================
Inspecting script file break.R...

File contents are:
**********************************************************************
i <- 0 #Initialize i
while(i < Inf) {
  if (i == 20) {
    break 
  } # Break out of the while loop! 
  else { 
    cat("i equals " , i , " \n")
    i <- i + 1 # Update i
  }
}**********************************************************************

Testing break.R...

Output (only first 500 characters): 

**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  
i equals  10  
i equals  11  
i equals  12  
i equals  13  
i equals  14  
i equals  15  
i equals  16  
i equals  17  
i equals  18  
i equals  19  

**********************************************************************

Code ran without errors

Time consumed = 0.11139s

======================================================================
Inspecting script file basic_io.R...

File contents are:
**********************************************************************
# A simple script to illustrate R input-output.  
# Run line by line and check inputs outputs to understand what is happening  

MyData <- read.csv("../Data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names
**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: write.csv -> eval.parent -> eval -> eval -> write.table -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '../results/MyData.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file GDPP_map.R...

File contents are:
**********************************************************************
# making the world map and add the point of species's location to it
library("maps")
library("ggplot2")
load("../Data/GPDDFiltered.RData")
map("world")
attach(gpdd)
gpdd_map = ggplot(data=gpdd) + borders(colour='darkgrey') + geom_point(mapping =  aes(x=long,y=lat)) 
gpdd_map

# Most of filtered animals live in north hemisphere and concentrate in 50 degrees north latitude**********************************************************************

Testing GDPP_map.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 1.99864s

======================================================================
Inspecting script file Vectorize1.py...

File contents are:
**********************************************************************
#!/user/bin/env python3
""" This script is to make the python version of vectorize.R,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """
# using for loop
import numpy
import time
M = numpy.random.uniform(0,1,size=[1000,1000])
def SumALLElements(M):
    """ test vectorization """
    ToT =0
    for i in range(0,M.shape[0]):
        for j in range(0,M.shape[1]):
            ToT=ToT+M[i,j]
    return ToT

#using vectorizing
numpy.sum(M)**********************************************************************

Testing Vectorize1.py...

Vectorize1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.20179s

======================================================================
Inspecting script file try.R...

File contents are:
**********************************************************************
## run a simulation that involves sampling from a population with try

x <- rnorm(50) #Generate your population
doit <- function(x){
    x <- sample(x, replace = TRUE)
    if(length(unique(x)) > 30) {#only take mean if sample was sufficient
         print(paste("Mean of this sample was:", as.character(mean(x))))
        } 
    else {
        stop("Couldn't calculate mean: too few unique points!")
        }
    }

## Try using "try" with vectorization:
result <- lapply(1:100, function(i) try(doit(x), FALSE))

## Or using a for loop:
result <- vector("list", 100) #Preallocate/Initialize
for(i in 1:100) {
    result[[i]] <- try(doit(x), FALSE)
    }**********************************************************************

Testing try.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Mean of this sample was: -0.277533243042582"
[1] "Mean of this sample was: -0.325628505080143"
[1] "Mean of this sample was: -0.426879256882044"
[1] "Mean of this sample was: -0.185150319667602"
[1] "Mean of this sample was: -0.172167265427744"
[1] "Mean of this sample was: -0.164260186632721"
[1] "Mean of this sample was: -0.322287513342586"
[1] "Mean of this sample was: -0.064080314789204"
[1] "Mean of this sample was: -0.18561131319618"
[1] "Mean of this sample was: -0.0137547563606326"
[
**********************************************************************

Encountered error:
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!
Error in doit(x) : Couldn't calculate mean: too few unique points!

======================================================================
Inspecting script file apply2.R...

File contents are:
**********************************************************************
SomeOperation <- function(v){ # (What does this function do?)
  if (sum(v) > 0){
    return (v * 100)
  }
  return (v)
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 

**********************************************************************
            [,1]        [,2]        [,3]        [,4]       [,5]        [,6]
 [1,]  1.1996915   23.237529  0.58831642  1.37106469  0.1377062    5.949924
 [2,]  0.7909347   -1.050041  0.15692779  0.51839201 -0.3676378   -6.551060
 [3,] -1.7745571   25.929926  1.05291756 -0.55225024 -0.4220292 -248.737607
 [4,] -0.7710274  170.739777  0.12417550 -0.52030695 -0.3811200  134.029891
 [5,] -2.4044394   13.509202  0.03676465 -0.01762631  1.1567559  -61.347032
 [6,] -0.2818130   24.979694 -2.94888672 -0.4
**********************************************************************

Code ran without errors

Time consumed = 0.09673s

======================================================================
Inspecting script file get_TreeHeight.R...

File contents are:
**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance){
  radians <- degrees * pi / 180
  height <- distance * tan(radians)
  print(paste("Tree height is:", height))
  
  return (height)
}

# get the argument from command line
args=commandArgs()
MyData <- read.csv(args[6], header = TRUE) # import with headers
Tree.Height.m = array(0,dim(MyData[1]))
for (i in 1:dim(MyData)[1])
{
  Tree.Height.m[i]=TreeHeight(MyData[i,3],MyData[i,2])
}

# combine the dataframe and new height data
MyData=cbind(MyData,Tree.Height.m)

#extract the file name without suffix and path
File_name = substr(basename(args[6]),1,nchar(basename(args[6]))-4)

# output the dataframe with height column to InputFileName_treeheights.csv file
write.csv(MyData, paste("../Results/",File_name,"_treeheights.csv"),row.names = FALSE) # write row names
**********************************************************************

Testing get_TreeHeight.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") : cannot open file 'NA': No such file or directory
Execution halted

======================================================================
Inspecting script file TAutoCorr.R...

File contents are:
**********************************************************************
load("../Data/KeyWestAnnualMeanTemperature.Rdata")
attach(ats)
plot(ats)
#calculate the successive correlation
r_successive = cor(Temp[1:99],Temp[2:100])

# calculate the random permutation correlation
set.seed(001)
r_random = rep(NA, 10000)
for (i in 1:length(r_random))
{
  random_yearTemp = sample(Temp, length(Year), replace = FALSE)
  r_random[i] = cor(random_yearTemp[1:99],random_yearTemp[2:100])
}
 
p_position=0 
for (i in 1:length(r_random))
{
  if (r_successive<r_random[i])
  {
    p_position = p_position+1
  }
}
p_value = p_position/length(r_random)

hist_correlation=hist(r_random, probability = T)
print (p_value)
**********************************************************************

Testing TAutoCorr.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Error in readChar(con, 5L, useBytes = TRUE) : cannot open the connection
Calls: load -> readChar
In addition: Warning message:
In readChar(con, 5L, useBytes = TRUE) :
  cannot open compressed file '../Data/KeyWestAnnualMeanTemperature.Rdata', probable reason 'No such file or directory'
Execution halted

======================================================================
Inspecting script file Vectorize2.R...

File contents are:
**********************************************************************
# Runs the stochastic (with gaussian fluctuations) Ricker Eqn .

rm(list=ls())

stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  
  for (pop in 1:length(p0)) #loop through the populations
  {
    for (yr in 2:numyears) #for each pop, loop through the years
    {
      N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
    }
  }
 return(N)
}


# Now write another function called stochrickvect that vectorizes the above 
# to the extent possible, with improved performance: 

# print("Vectorized Stochastic Ricker takes:")
# print(system.time(res2<-stochrickvect()))

stochrickvect = function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
  #initialize
  N<-matrix(NA,numyears,length(p0))
  N[1,]<-p0
  for (yr in 2:numyears)
  {
    N[yr,] = N[yr-1,]*exp(r*(1-N[yr-1,]/K)+rnorm(1,0,sigma))
  }
  
  return(N)
  
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))**********************************************************************

Testing Vectorize2.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Vectorized Stochastic Ricker takes:"
   user  system elapsed 
  0.044   0.004   0.047 

**********************************************************************

Code ran without errors

Time consumed = 0.12988s

======================================================================
Inspecting script file DataWrangTidy.R...

File contents are:
**********************************************************************
library("dplyr")
library("tidyr")

# input the dataset
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
class(MyData)

# head the data
dplyr::tbl_df(MyData)

#change the "" with 0
MyData[MyData == ""] = 0

MyData <- t(MyData)
colnames(MyData)

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
colnames(TempData) <- MyData[1,] # assign column names from original data
rownames(TempData) <- NULL
MyWrangledData = tidyr::gather(TempData,k=Species,value=Count,-Cultivation,-Block,-Plot,-Quadrat)
head(TempData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)**********************************************************************

Testing DataWrangTidy.R...

Output (only first 500 characters): 

**********************************************************************
[1] "matrix"
# A tibble: 45 x 60
   V1       V2     V3     V4    V5    V6    V7    V8    V9    V10   V11   V12  
   <chr>    <chr>  <chr>  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>
 1 Cultiva… octob… octob… octo… octo… octo… may   may   may   may   may   march
 2 Block    a      a      a     a     a     a     a     a     a     a     a    
 3 Plot     1      1      1     1     1     2     2     2     2     2     3    
 4 Quadrat  Q1     Q2     Q3    Q4    Q5    Q1    Q2    Q3    Q4    
**********************************************************************

Encountered error:

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


======================================================================
Inspecting script file preallocate.R...

File contents are:
**********************************************************************
# This script is to compare the system time between using pre-allocation and not
# Author Wang YuHeng


# not preallocate the a
a <- NA
system.time(for (i in 1:100000) {a <- c(a, i)})
print(a)



#preallocate the a
a <- rep(NA, 1000000)
system.time(for (i in 1:1000000) {a[i] <- i})
print(a)**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00418s

======================================================================
Inspecting script file TAutoCorr.tex...

File contents are:
**********************************************************************
\documentclass{article}
\title{Autocorrelation in Weather}
\author{Wang YuHeng}
\date{23/10/2018}

\begin{document}
  \maketitle
  
  \begin{abstract}
    Temperatures of one year are significantly correlated with the next year. 
  \end{abstract}

  \section{Materials \& Methods}

  \begin{equation}
    pvalue = 4e-4
  \end{equation}
  \section{Conclusion}
    The possibility that temperatures of one year are significantly correlated with the next year is 99.96 of one hundred percent, thus temperatures of one year and next year have significant correlation.
\end{document}**********************************************************************

Testing TAutoCorr.tex...

======================================================================
Inspecting script file control.R...

File contents are:
**********************************************************************
## Some code exemplifying control flow constructs in R 

## If statement
a <- TRUE
if (a == TRUE){
  print ("a is TRUE")
} else {
  print ("a is FALSE")
}

## On a single line
z <- runif(1) ##random number
if (z <= 0.5) {
  print ("Less than a quarter")
}

## For loop using a sequence
for (i in 1:100){
  j <- i * i
  print(paste(i, " squared is", j ))
}

## For loop over vector of strings
for(species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii'))
{
  print(paste('The species is', species))
}

## for loop using a vector
v1 <- c("a","bc","def")
for (i in v1){
  print(i)
}

## While loop
i <- 0
while (i<100){
  i <- i+1
  print(i^2)
}**********************************************************************

Testing control.R...

Output (only first 500 characters): 

**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "11  squared is 121"
[1] "12  squared is 144"
[1] "13  squared is 169"
[1] "14  squared is 196"
[1] "15  squared is 225"
[1] "16  squared is 256"
[1] "17  squared is 289"
[1] "18  squared is 324"
[1] "19  squared is 361"
[1] "20  squared is 400"
[1] "2
**********************************************************************

Code ran without errors

Time consumed = 0.10112s

======================================================================
======================================================================
Finished running scripts

Ran into 11 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!