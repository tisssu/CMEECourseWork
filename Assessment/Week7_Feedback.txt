Starting weekly assessment for Yuheng, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 183.89 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, Week5, Week2, Week9, Week4, .git, HPC_handin, Week3, Project

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
# Created by https://www.gitignore.io/api/macos

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# End of https://www.gitignore.io/api/macos










# Created by https://www.gitignore.io/api/latex

### LaTeX ###
## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

### LaTeX Patch ###
# glossaries
*.glstex


# End of https://www.gitignore.io/api/latex






# Created by https://www.gitignore.io/api/r

### R ###
# History files
.Rhistory
.Rapp.history

# Session Data files
.RData

# Example code in package build process
*-Ex.R

# Output files from R CMD build
/*.tar.gz

# Output files from R CMD check
/*.Rcheck/

# RStudio files
.Rproj.user/

# produced vignettes
vignettes/*.html
vignettes/*.pdf

# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3
.httr-oauth

# knitr and R markdown default cache directories
/*_cache/
/cache/

# Temporary files created by R markdown
*.utf8.md
*.knit.md

# Shiny token, see https://shiny.rstudio.com/articles/shinyapps.html
rsconnect/

### R.Bookdown Stack ###
# R package: bookdown caching files
/*_files/


# End of https://www.gitignore.io/api/r

**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

#1 Content
The Week1 homework, containing all week1 script and data file.


#2 Installation
Don't need installation.

#3 Example usage
dyn3177-209:Code tisssu$ bash boilerplate.sh

This is a shell script

#4 Environment
Run under linux or macos

#5 Version
1.00 , first version 

#6 Author information
Wang YuHeng 
yuheng.wang18.imperial.ac.uk

##############
update in Week2
#############

#1 content
The Week2's homework, containing all week2 script and data file and result.

#2 Example usage
python3 align_seqs_better.py

#3 Environment
Run under linux or macos

#4 Version
1.10 , second version 

##############
update in Week3
#############

#1 content
The Week3's homework, containing all week3's script and data file and result.

#2 Example usage
Rscript get_TreeHeight.R

#3 Environment
R 3.5.1, python 3.7.0

#4 Version
1.20 , the third version.

##############
update in Week7
#############

#1 content 
The week7's assignment, containing all week7's script and data file and result. And part of miniproject.

#2 Example usage
python3 TestR.py

#3 Environment
R 3.5.1, python 3.7.0

#4 Version
1.30 , the fourth version.

##############
update in Week10
#############

#1 content (This is the last version of coursework except miniproject and HPC exercises)

1. add project proposal

2. add one extra credit problem in week7

3. move things in week4,5 to this repository

4. add mini project to this repository

5. add HPC exercises to this repository

#2 Environment
R 3.5.1, python 3.7.0, QGIS 3.41

#3 Version
1.40 , the fifth version.**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
#################
script: LV1.py
function: runs Lotka_Volterra model and plot the population density in consumer and resource
#################

################
script: LV2.py
function: runs Lotka-Volterra model with prey density dependence and plot population density in consumer and resource
#################

################
script: profileme.py
function: profile some function
#################

################
script: profileme2.py
function: profile some function 
#################

################
script: timeitime.py
function: profile some function for comparasion
#################

################
script: DrawFW.py
function: contruct a food web and plot it
#################

################
script: blackbird.py
function: find bird's kingdom, phylum, species using regex
#################

################
script: run_LV.py
function: run LV1, LV2 and profile them
#################

#################
script:testR.R testR.py
function: test running R in python
##################

#################
script:using_os.py
function: using regex to find C start file and dictionary
##################

#################
script:fmr.R 
function: making liner regression of mass and fermentation.
##################

#################
script:run_fmr_R.py
function: run fmr.R in python
#################

#################
script:regex.py
function: practise regex
#################

#################
script:Nets.R
function: This script visualizes the QMEE CDT collaboration network, coloring the the nodes by the type of node (organization type: "University","Hosting Partner", "Non-hosting Partner"
#################

#################
script:Nets.py
function: convert Nets.R to python script
#################**********************************************************************

Found following files in results directory: outputFile.Rout, TestR.Rout, fmr_plot.pdf, Networks.pdf, LV_model2.pdf, LV2_model2.pdf, QMEE_py.svg, LV_model1.pdf, TestR_errFile.Rout, errorFile.Rout, QMEENet.svg, LV2_model1.pdf...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 16 code files: TestR.py, regexs.py, profileme2.py, blackbirds.py, Nets.py, TestR.R, profileme.py, fmr.R, using_os.py, LV1.py, DrawFW.py, Nets.R, run_fmr_R.py, run_LV.py, LV2.py, timeitime.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to test run R in python,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

import subprocess
subprocess.Popen("/usr/local/bin/Rscript --verbose TestR.R > \
../Results/TestR.Rout 2> ../Results/TestR_errFile.Rout",\
 shell=True).wait()

**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04372s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to practice regex,
AUthor: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

import re 
my_string = "a given string"

match = re.search(r"\s", my_string)
print(match)
match.group()

match = re.search(r'\d', my_string)
print(match)

MyStr = "an example"

match =re.search(r'\w*\s', MyStr)

if match:
    print('found a match:', match.group())
else:
    print("did not find a match")

match = re.search(r'2', "it takes 2 to tango")
match.group()

match = re.search(r"\d", "it takes 2 to tango")
match.group()

match = re.search(r'\d.*', "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s','once upon a time')
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()

re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^w*.*\s', 'once upon a time').group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()

re.search(r'<.+?', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*', '1432.75+60.22i').group()

re.search(r'[AGTC]+', 'the sequence ATTCGT').group()

re.search(r'\s+[A-Z]{1}\w+\s\w+', "The bird-shit frog's name is Theloderma asper").group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r'[\w\s]+,\s[\w\.@]+,\s[\w\s]+', MyStr)
match.group()

MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
# match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s&]+",MyStr)
# match.group()
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s&]+",MyStr)
match.group()

match.group(0)

match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s]+)",MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"
emails =  re.findall(r'[\w\.-]+@[\w\.-]+',MyStr)
for email in emails:
    print(email)

with open("../Data/TestOaksData.csv", "r") as f:
    found_oaks = re.findall(r'Q.*\n', f.read())
    for name in found_oaks:
        print(name.replace(",",""))

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a.academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a.academic@imperial.ac.uk, Some other stuff thats even more boring"
found_matches = re.findall(r'([\w\s]+),\s([\w\.-]+@[\w\.-]+)', MyStr)
found_matches

for item in found_matches:
    print(item)

import urllib3

conn = urllib3.PoolManager() # open a connection
r = conn.request('GET', 'https://www.imperial.ac.uk/silwood-park/academic-staff/') 
webpage_html = r.data #read in the webpage's contents
type(webpage_html)

My_Data = webpage_html.decode()
print(My_Data)


pattern = r'Dr\s+\w+\s+\w+'
regex = re.compile(pattern)
for match in regex.finditer(My_Data):
    print(match.group())

New_Data = re.sub(r'\t'," ", My_Data) # replace all tabs with a space
# print(New_Data)**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 
Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory
Samraat Pawar
s.pawar@imperial.ac.uk
Systems biology and ecological theory
s.pawar@imperial.ac.uk
a-academic@imperial.ac.uk
y.a_academic@imperial.ac.uk
Quercus robur

Quercus cerris

Quercus petraea

('Samraat Pawar', 's.pawar@imperial.ac.uk')
(' Another academic', 'a.academic@imperial.ac.uk')
(' Yet another academic', 'y.a.academic@imperial.ac.uk')

**********************************************************************

Code ran without errors

Time consumed = 0.42157s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

""" This script profile the function which was optimized,
Author : YuHeng Wang (yuheng.wang18.imperial.ac.uk) """



def my_squares(iters):
    """ calculate i^2 """
    out = [i ** 2 for i in range(iters)]
    return out 

def my_join(iters, string):
    """ join the input string """
    out =  ""
    for i in range(iters):
        out += "," + string 
    return out 

def run_my_funcs(x,y):
    """ run function my_squares and my_join """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0 

run_my_funcs(10000000, "My string")

**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.95154s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
import re
import scipy as sc
""" This script is to find kingdom, phylum, species for all species in dataset,
Author: YuHeng Wang (yuheng.wang18@imperial.ac.uk) """


# Read the file
f = open('../Data/blackbirds.txt', 'r')
text = f.read()
f.close()

# remove \t\n and put a space in:
text = text.replace('\t',' ')
text = text.replace('\n',' ')

# note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform
# to ASCII:
text = text.encode('ascii', 'ignore').decode() #will not work in python 3

# Now extend this script so that it captures the Kingdom, 
# Phylum and Species name for each species and prints it out to screen neatly.

# Hint: you may want to use re.findall(my_reg, text)...
# Keep in mind that there are multiple ways to skin this cat! 
# Your solution may involve multiple regular expression calls (easier!), or a single one (harder!)




# find them seperately
find_kin = sc.array(re.findall(r'Ki\w+\s+\w+',text))
find_phy = sc.array(re.findall(r'Ph\w+\s+\w+',text))
find_spe = sc.array(re.findall(r'Sp\w+\s+\w+\s+\w+',text))

#combine the results
find_match = sc.concatenate((find_kin,find_phy,find_spe),axis=0).reshape(3,4)
print(find_match)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
[['Kingdom Animalia' 'Kingdom Animalia' 'Kingdom Animalia'
  'Kingdom Animalia']
 ['Phylum Chordata' 'Phylum Chordata' 'Phylum Chordata' 'Phylum Chordata']
 ['Species Euphagus carolinus' 'Species Euphagus cyanocephalus'
  'Species Turdus boulboul' 'Species Agelaius assimilis']]

**********************************************************************

Code ran without errors

Time consumed = 0.16909s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to convert Nets.R into python,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import csv

links = []
with open("../Data/QMEE_Net_Mat_edges.csv") as f:
    next(f)
    csvread = csv.reader(f)
    for  line in csvread:
        links += line

links = sc.array(links)
links = links.reshape(6,6)
links = links.astype(sc.int32)

name =["ICL","UoR","CEH","ZSL","CEFAS","NonAc"]
ins_link = []
for i in range(6):
    for j in range(6):
        if links[i,j] != 0 :
            ins_link.append((name[i],name[j],links[i,j]))
            

nodes = []
with open("../Data/QMEE_Net_Mat_nodes.csv") as f:
    next(f)
    csvread = csv.reader(f)
    for  line in csvread:
        nodes += line

nodes = sc.array(nodes)
nodes = nodes.reshape(6,3)
size = nodes[:,2]
size = size.astype(sc.int32)
size = size * 50

color = ["r","r","g","g","g","b"]
color = sc.array(color)



f4 = p.figure()
G = nx.DiGraph()
names = sc.array(name)
G.add_nodes_from(names)
G.add_weighted_edges_from(ins_link)
nx.draw_networkx(G,node_size = size,node_color = color,edge_color = "grey")
f4.savefig("../Results/QMEE_py.svg")**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************

print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.06831s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/user/bin/env python3
""" This script is to profile the code,
Author: YuHeng Wang (yuheng.wang18@imperial.ac.uk) """

def my_squares(iters):
    """ output i^2 in iteration """
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """ join the input string """
    out = ""
    for i in range(iters):
        out += string.join(",")
    return out 

def run_my_funcs(x,y):
    """ print results of function before """
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0


run_my_funcs(10000000,"My string")

**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.41019s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.13871s

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This is to find Dir for files in home directory using subprocess and regex,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)   """

# Use the subprocess.os module to get a list of files and  directories 
# in your ubuntu home directory 

# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess
import re

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for string in subdir + files:
        FilesDirsStartingWithC +=  re.findall(r'C.*',string)
  
print(FilesDirsStartingWithC)
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:
FilesDirsStartingWithC_c = []

for (dir, subdir, files) in subprocess.os.walk(home):
    for string in subdir + files:
        FilesDirsStartingWithC_c +=  re.findall(r'[Cc].*',string)
print(FilesDirsStartingWithC_c)


#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:

DirsStartingWithC_c = []

for (dir, subdir, files) in subprocess.os.walk(home):
    for string in subdir:
        DirsStartingWithC_c +=  re.findall(r'[Cc].*',string)
print(DirsStartingWithC_c)**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['CEauthority', 'C.log.9', 'C.log.4', 'C.log.3', 'C.log.5', 'C.log.1', 'C.log.7', 'C.log.2', 'C.log', 'C.log.10', 'C.log.6', 'C.log.8', 'C.log.9', 'C.log.4', 'C.log.3', 'C.log.5', 'C.log.1', 'C.log.7', 'C.log.2', 'C.log', 'C.log.10', 'C.log.6', 'C.log.8', 'Checkpoints.json', 'CENSE.txt', 'CENSE.txt', 'CHANGELOG.md', 'CA.js', 'CA.min.js', 'CA.min.js', 'CA.js', 'CENSE.md', 'CENSE', 'CENSE', 'CODE_OF_CONDUCT.md', 'CENSE', 'CENSE', 'CENSE', 'CENSE', 'CENSE.txt', 'CHANGES.md', 'CHANGES.md', 'CENSE', '
**********************************************************************

Code ran without errors

Time consumed = 5.09931s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

""" This script is to do integrate in the Lotka_Volterra model and plot the relation between consumer and resource,
Author YuHeng Wang (yuheng.wang18@imperial.ac.uk) """

import scipy.integrate as integrate
import scipy as sc

def dCR_dt(pops, t=0):
    """ This function is equation of Lotka-Volterra model""" 
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

type(dCR_dt)

r = 1.
a = 0.1 
z = 1.5
e = 0.75

t = sc.linspace(0, 15,  1000)
R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops
type(infodict)

infodict.keys()

infodict['message']

import matplotlib.pylab as p 
f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
f1.savefig('../Results/LV_model1.pdf')

f2 = p.figure()
p.plot(pops[:,0],pops[:,1],'r-')
p.grid()
p.xlabel("Resource density")
p.ylabel("Consumer density")
p.title("Consumer-Resource population dynamics")
f2.savefig("../Results/LV_model2.pdf")

print("The final resource density is ",  pops[-1,0])
print("THe final consumer density is ",  pops[-1,1])**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
The final resource density is  9.78000353962
THe final consumer density is  17.1665894639

**********************************************************************

Code ran without errors

Time consumed = 0.78781s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to build a food web and plot it,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmAdjList(N = 2, C = 0.5):
    """ function of build food web link in dataset 
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)
    return ALst

MaxN = 30
C = 0.75 
AdjL = sc.array(GenRdmAdjList(MaxN, C))
AdjL

Sps = sc.unique(AdjL)

SizRan = ([-10,10])
Sizes = sc.random.uniform(SizRan[0],SizRan[1],MaxN)
Sizes

p.hist(Sizes)

p.hist(10 ** Sizes)

p.close("all")


f3 = p.figure()
pos = nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))
NodSizes = 150 * (Sizes - min(Sizes)/(max(Sizes)-min(Sizes)))

nx.draw_networkx(G, pos, node_size = NodSizes)
f3.savefig("../Results/Networks.pdf")**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
/usr/local/lib/python3.5/dist-packages/matplotlib/collections.py:836: RuntimeWarning: invalid value encountered in sqrt
  scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
        
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
# V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()


**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error:
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
""" This script is to run frm.R and put the output on python idea,
Aurhor: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

import subprocess
p = subprocess.Popen(["Rscript", "fmr.R"],stdout = subprocess.PIPE,stderr= subprocess.PIPE)
stdout, stderr = p.communicate()
print(stdout.decode())
**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!


**********************************************************************

Code ran without errors

Time consumed = 0.16807s

======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to run LV1.py, LV2.py
AUthor: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

import time
import subprocess

start = time.time()
subprocess.os.system("python3 LV1.py")
print("LV1.py takes %f s to run" % (time.time() - start))

start = time.time()
subprocess.os.system("python3 LV2.py 1.0 0.1 1.5 0.75 80")
print("LV2.py takes %f s to run" % (time.time() - start))**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
The final resource density is  9.78000353962
THe final consumer density is  17.1665894639
The final resource density is  22.2787516698
THe final consumer density is  7.33704186495
LV1.py takes 0.747587 s to run
LV2.py takes 0.728734 s to run

**********************************************************************

Code ran without errors

Time consumed = 1.51332s

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

""" This script is to do integrate in the Lotka_Volterra model with prey density dependence and plot the relation between consumer and resource,
Author YuHeng Wang (yuheng.wang18@imperial.ac.uk) """

import scipy.integrate as integrate
import scipy as sc
import sys

def dCR_dt(pops, t=0):
    """ function is equation of  Lotka-Volterra model with prey density dependence """
    R = pops[0]
    C = pops[1]
    dRdt = r * R*(1-R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

type(dCR_dt)

r = float(sys.argv[1])
a = float(sys.argv[2]) 
z = float(sys.argv[3])
e = float(sys.argv[4])
K = float(sys.argv[5])

t = sc.linspace(0, 15,  1000)
R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])

pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops
type(infodict)

infodict.keys()

infodict['message']

import matplotlib.pylab as p 
f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.text(3,20,"r="+str(r)+",a="+str(a)+",z="+str(z)+",e="+str(e)+",k="+str(K),fontsize = 12)
f1.savefig('../Results/LV2_model1.pdf')


f2 = p.figure()
p.plot(pops[:,0],pops[:,1],'r-')
p.grid()
p.xlabel("Resource density")
p.ylabel("Consumer density")
p.title("Consumer-Resource population dynamics")
p.text(3,20,"r="+str(r)+",a="+str(a)+",z="+str(z)+",e="+str(e)+",k="+str(K),fontsize = 12)
f2.savefig("../Results/LV2_model2.pdf")

print("The final resource density is ",  pops[-1,0])
print("THe final consumer density is ",  pops[-1,1])**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "LV2.py", line 21, in <module>
    r = float(sys.argv[1])
IndexError: list index out of range

======================================================================
Inspecting script file timeitime.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to profile some functions,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

####################################
# loops vs. list comprehensions
###########################

iters = 1000000

import timeit 

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)

########################################
# loops vs. the join method for strings
#########################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring))

import time 
start = time.time()
my_squares_loops(iters)
print("my_squares_loops take %f s to run." % (time.time()-start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time()-start))**********************************************************************

Testing timeitime.py...

timeitime.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00482s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!