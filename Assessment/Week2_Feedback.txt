Starting weekly assessment for Yuheng, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.57 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
# Created by https://www.gitignore.io/api/macos

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# End of https://www.gitignore.io/api/macos










# Created by https://www.gitignore.io/api/latex

### LaTeX ###
## Core latex/pdflatex auxiliary files:
*.aux
*.lof
*.log
*.lot
*.fls
*.out
*.toc
*.fmt
*.fot
*.cb
*.cb2
.*.lb

## Intermediate documents:
*.dvi
*.xdv
*-converted-to.*
# these rules might exclude image files for figures etc.
# *.ps
# *.eps
# *.pdf

## Generated if empty string is given at "Please type another file name for output:"
.pdf

## Bibliography auxiliary files (bibtex/biblatex/biber):
*.bbl
*.bcf
*.blg
*-blx.aux
*-blx.bib
*.run.xml

## Build tool auxiliary files:
*.fdb_latexmk
*.synctex
*.synctex(busy)
*.synctex.gz
*.synctex.gz(busy)
*.pdfsync

## Build tool directories for auxiliary files
# latexrun
latex.out/

## Auxiliary and intermediate files from other packages:
# algorithms
*.alg
*.loa

# achemso
acs-*.bib

# amsthm
*.thm

# beamer
*.nav
*.pre
*.snm
*.vrb

# changes
*.soc

# comment
*.cut

# cprotect
*.cpt

# elsarticle (documentclass of Elsevier journals)
*.spl

# endnotes
*.ent

# fixme
*.lox

# feynmf/feynmp
*.mf
*.mp
*.t[1-9]
*.t[1-9][0-9]
*.tfm

#(r)(e)ledmac/(r)(e)ledpar
*.end
*.?end
*.[1-9]
*.[1-9][0-9]
*.[1-9][0-9][0-9]
*.[1-9]R
*.[1-9][0-9]R
*.[1-9][0-9][0-9]R
*.eledsec[1-9]
*.eledsec[1-9]R
*.eledsec[1-9][0-9]
*.eledsec[1-9][0-9]R
*.eledsec[1-9][0-9][0-9]
*.eledsec[1-9][0-9][0-9]R

# glossaries
*.acn
*.acr
*.glg
*.glo
*.gls
*.glsdefs

# gnuplottex
*-gnuplottex-*

# gregoriotex
*.gaux
*.gtex

# htlatex
*.4ct
*.4tc
*.idv
*.lg
*.trc
*.xref

# hyperref
*.brf

# knitr
*-concordance.tex
# TODO Comment the next line if you want to keep your tikz graphics files
*.tikz
*-tikzDictionary

# listings
*.lol

# makeidx
*.idx
*.ilg
*.ind
*.ist

# minitoc
*.maf
*.mlf
*.mlt
*.mtc[0-9]*
*.slf[0-9]*
*.slt[0-9]*
*.stc[0-9]*

# minted
_minted*
*.pyg

# morewrites
*.mw

# nomencl
*.nlg
*.nlo
*.nls

# pax
*.pax

# pdfpcnotes
*.pdfpc

# sagetex
*.sagetex.sage
*.sagetex.py
*.sagetex.scmd

# scrwfile
*.wrt

# sympy
*.sout
*.sympy
sympy-plots-for-*.tex/

# pdfcomment
*.upa
*.upb

# pythontex
*.pytxcode
pythontex-files-*/

# tcolorbox
*.listing

# thmtools
*.loe

# TikZ & PGF
*.dpth
*.md5
*.auxlock

# todonotes
*.tdo

# easy-todo
*.lod

# xcolor
*.xcp

# xmpincl
*.xmpi

# xindy
*.xdy

# xypic precompiled matrices
*.xyc

# endfloat
*.ttt
*.fff

# Latexian
TSWLatexianTemp*

## Editors:
# WinEdt
*.bak
*.sav

# Texpad
.texpadtmp

# LyX
*.lyx~

# Kile
*.backup

# KBibTeX
*~[0-9]*

# auto folder when using emacs and auctex
./auto/*
*.el

# expex forward references with \gathertags
*-tags.tex

# standalone packages
*.sta

### LaTeX Patch ###
# glossaries
*.glstex


# End of https://www.gitignore.io/api/latex


**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

#1 Content
The Week1 homework, containing all week1 script and data file.


#2 Installation
Don't need installation.

#3 Example usage
dyn3177-209:Code tisssu$ bash boilerplate.sh

This is a shell script

#4 Environment
Run under linux or macos

#5 Version
1.00 , first version 

#6 Author information
Wang YuHeng 
yuheng.wang18.imperial.ac.uk

##############
update in Week2
#############

#1 content
The Week2's homework, containing all week2 script and data file and result.

#2 Example usage
python3 align_seqs_better.py

#3 Environment
Run under linux or macos

#4 Version
1.10 , second version **********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, sandbox, Result, Data

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Week2 Readme

##################
script: basic_io.py
function: demonstrate python io operation
#################

#####################
script: basic_csv.py
function: demonstrate how to handle csv file using csv package
########################

######################
script: boilerplate
function: as a boilerplate
###########################

###################
script: using_name.py
function: telling user if script is imported or run by itself
##########################

#####################
script: sysargv.py
function: explain sys.argv
###################

##################
script: scope.py
function: demonstrate the use of global variable and local variable
##################

##################
script: control_flow.py
fuction: demonstrate the control flow in python
##################

#################
script; cfexercises1.py
function: test loops and conditional statments
#################

#################
script; cfexercises2.py
function: some mathematical operation example
#################

#################
script; loops.py
function: demonstrate loops in python
#################

#################
script;  oaks.py
function: demonstrate list comprehension in python
#################

################
script: lc1.py
function: list comprehension practice
################

################
script: lc2.py
function: list comprehension and loops practice
################

################
script: dictionary.py
function: combine same order in list and form a new dictionary
################

################
script: tuple.py
function: print birds tuple seperately by species
################

################
script: test_control_flow.py
function: Doing unit test on control flow files
################

################
script: debugme.py
function: test pdb function
################

################
script: align_seqs.py
function: input DNA sequence from external file and align it, befor saving it in another file
output file name: align_seqs_result.txt 
################

################
script: align_seqs_fasta.py
function: input DNA sequence from two external fasta fule and align it.
################

################
script:align_seqs_better.py
function: align DNA sequence and save all best result in a file
output file name: better_result
################

################
script: oaks_debugme.py
function: debug the oaks_debugme.py and make some improvement to it
output: save the result to JustOaksData.csv in Data file
################

**********************************************************************

Found following files in results directory: align_seqs_result.txt, better_result...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 21 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, align_seqs_better.py, dictionary.py, debugme.py, scope.py, cfexercises1.py, tuple.py, basic_io.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, sysargv.py, align_seqs_fasta.py, control_flow.py, test_control_flow.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************

""" This script is made to filter months that raining greater than 100, or less than 50 seperately, 
using conventional loops and list comprehension.
Author : Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

# ANNOTATE WHAT EVERY BLOCK OR IF NECESSARY, LINE IS DOING! 

# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS

## list comprehension 
# month and rainfall tuple with rainfall greater than 100 mm.
rainfall_largerthan100_lc = list (month for month in rainfall if month[1]>100)
print(rainfall_largerthan100_lc)

# month with rain less than 50 mm
rainfall_lessthan50_lc = list (month[0] for month in rainfall if month[1]<50)
print(rainfall_lessthan50_lc)

## conventional loops 
# month and rainfall tuple with rainfall greater than 100 mm.
rainfall_largerthan100_loops = list()
for month in rainfall:
    if month[1]>100:
        rainfall_largerthan100_loops.append(month)
print(rainfall_largerthan100_loops)

# month with rain less than 50 mm
rainfall_lessthan50_loops = list()
for month in rainfall:
    if month[1]<50:
        rainfall_lessthan50_loops.append(month[0])
print(rainfall_lessthan50_loops)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.01446s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

"""Description of this program or application.
      You can use seceral lines"""
      
__appname__ = '[boilerplate]'
__author__ = 'Wang YuHeng (yuheng.wang18@imperial.ac.uk)'
__version__ = '0.0.1'
__licence__ = "Licence for this code/program"

## imports ##
import sys # module to interface our program with the operating system 

## constants ##

## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate')  # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """ Make sure the "main" function is called fromn command line"""
    status = main(sys.argv)
    sys.exit(status) 
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.01217s

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
""" This script demonstrate the usage of csv package on how to handle cvs files,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""


import csv

# Read a file containing 
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../Data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../data/testcsv.csv','r')
g = open('../data/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
('The species is', 'Species')
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
('The species is', 'Daubentonia_madagascariensis')
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
('The species is', 'Allocebus_trichotis')
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
('The species is', 'Avahi_laniger')
['Avahi_occidentalis', 'Lemurifo
**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "basic_csv.py", line 21, in <module>
    f = open('../data/testcsv.csv','r')
IOError: [Errno 2] No such file or directory: '../data/testcsv.csv'

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
#!/user/bin/env python3
"""Some functions exemplifying the use of mathematical operations,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """


__author__ ='Wang YuHeng (yuheng.wang18@imperial.ac.uk)'
__version__ ='0.0.1'

import sys

"""square x"""
def foo_1(x):
    return x ** 0.5 

"""find the larger one in x,y"""
def foo_2(x, y):
    if x > y:
        return x
    return y

"""making the number inpute a increasing sequence"""
def foo_3(x, y, z):
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

"""calculating the factorial of x"""
def foo_4(x):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

"""calculating the factorial of x recursively"""
def foo_5(x): # a recursive function
    if x == 1:
        return 1
    return x * foo_5(x - 1)

"""Calculate the factorial of x in a different way"""
def foo_6(x): # Calculate the factorial of x in a different way
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto




def main(argv):
    print(foo_1(4))
    print(foo_1(3))
    print(foo_2(5,3))
    print(foo_3(1, 2, 4))
    print(foo_4(4))
    print(foo_4(5))
    print(foo_5(4))
    print(foo_5(5))
    print(foo_6(4))
    print(foo_6(5))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)

**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
2.0
1.73205080757
5
[1, 2, 4]
24
120
24
120
24
120

**********************************************************************

Code ran without errors

Time consumed = 0.02226s

======================================================================
Inspecting script file align_seqs_better.py...

File contents are:
**********************************************************************
""" This script is to align DNA sequence and save all best result in a file,
AUthor: Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """


seq2 = "ATCGCCGGATTACGGG"
seq1 = "CAATTCGGAT"


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1
allresult = []
for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z >= my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
        allresult.append((my_best_align,s1,my_best_score))

# save all best result to a list 
best_result = []
for result in allresult:
    if result[2] == my_best_score:
        best_result.append(result)

# write result to better_result file                      
with open ("../Result/better_result", "w") as f:    
    for result in best_result:
        print(result[0]+"\n"+result[1]+"\n"+"Best score:", result[2],"\n", file =f)
   



**********************************************************************

Testing align_seqs_better.py...

align_seqs_better.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
  File "align_seqs_better.py", line 69
    print(result[0]+"\n"+result[1]+"\n"+"Best score:", result[2],"\n", file =f)
                                                                            ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
""" This script is to combine the same order in list and form a dictionary,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 

# ANNOTATE WHAT EVERY BLOCK OR IF NECESSARY, LINE IS DOING! 

# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS

# Write your script here:

# creat an empty dictionary
taxa_dic={}

# seperate the species and order 
for species, order in taxa:
# if key not exist, building it, otherwise appending the key
        if order not in taxa_dic:
                taxa_dic[order] = [species]
        else: 
                taxa_dic[order].append(species)
print(taxa_dic)


# another solution

# # extract the label of species and combine it 
# label = list(set(list(species[1] for species in taxa)))
# # put every thing in dictionary
# for name in label:
#         for species in taxa:
#                 if species[1] == name:
#                         if name not in taxa_dic:
#                                taxa_dic[name]=[species[0]] ##used to be error because lack []
#                         else:
#                                 taxa_dic[name].append(species[0])
# print(taxa_dic)**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Chiroptera': ['Myotis lucifugus'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.01497s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************

''' This script is to test the pdb and ipdb function by adding bug in script deliberately,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) '''


def createabug(x):
    y = x**4
    # creat a bug
    z = 0.
    import ipdb; ipdb.set_trace()
    y = y/z
    return y

createabug(25)**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 99

Output (only first 500 characters): 

**********************************************************************
]0;IPython: Week2/Code> [0;32m/home/mhasoba/Documents/Teaching/IC_CMEE/2018-19/Coursework/StudentRepos/YuhengWang_YW918/Week2/Code/debugme.py[0m(11)[0;36mcreateabug[0;34m()[0m
[0;32m      9 [0;31m    [0mz[0m [0;34m=[0m [0;36m0.[0m[0;34m[0m[0m
[0m[0;32m     10 [0;31m    [0;32mimport[0m [0mipdb[0m[0;34m;[0m [0mipdb[0m[0;34m.[0m[0mset_trace[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[0;32m---> 11 [0;31m    [0my[0m [0;34m=[0m [0my[0m[0;34m/[0m[0mz[0m[0
**********************************************************************

Code ran without errors

Time consumed = 0.36109s

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
""" This script demonstrate the use of global variable and local variable,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""


## Try this first

_a_global = 10

def a_function():
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()

print("Outside the function, the value is ", _a_global)


## Now try this

_a_global = 10

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    print("Inside the function, the value is ", _a_global)
    print("Inside the function, the value is ", _a_local)
    return None

a_function()
print("Outside the function, the value is", _a_global)**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('Inside the function, the value is ', 5)
('Inside the function, the value is ', 4)
('Outside the function, the value is ', 10)
('Inside the function, the value is ', 5)
('Inside the function, the value is ', 4)
('Outside the function, the value is', 5)

**********************************************************************

Code ran without errors

Time consumed = 0.01597s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************

""" This script test loops and conditional statment with the number of "hello",
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """  

for i in range(3, 17):
    print('hello')

for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.01509s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
""" This script print the bird tuple in seperate line by species,
Author WangYuHeng (yuheng.wang18@imperial.ac.uk)""" 

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehension!

# ANNOTATE WHAT EVERY BLOCK OR IF NECESSARY, LINE IS DOING! 

# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS

#print seperate line
for species in birds:
  print(species)
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('Passerculus sandwichensis', 'Savannah sparrow', 18.7)
('Delichon urbica', 'House martin', 19)
('Junco phaeonotus', 'Yellow-eyed junco', 19.5)
('Junco hyemalis', 'Dark-eyed junco', 19.6)
('Tachycineata bicolor', 'Tree swallow', 20.2)

**********************************************************************

Code ran without errors

Time consumed = 0.01460s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************

""" This python script is to demonstrate the I/O function in python, 
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""


##############################
# FILE INPUT
##############################
# Open a file for reading 
f = open('../sandbox/test.txt' , 'r')
# use "implicit" for loop:
# if the object is a file, puthon will cycle over lines
for line in f:
    print(line)
     
# close the file
f.close()

# Same sample, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

###########################
# FILE OUTPUT
###########################
# Save the element of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

############################
# STORING OBJRCTS
############################
# To save an object  (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle
f = open('../sandbox/testp.p', 'wb') ## note the b:accept binary files
pickle.dump(my_dictionary, f)
f.close()

##Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line
First Line

Second Line

Third Line

Fourth Line
{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.01684s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************

""" This script seperate the birds list into three different lists includiong the latin names , common names and mean body masses,
with the methods of list comprehensions and conventional loops respectively.
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """




birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )




#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# (2) Now do the same using conventional loops (you can shoose to do this 
# before 1 !). 

# ANNOTATE WHAT EVERY BLOCK OR IF NECESSARY, LINE IS DOING! 

# ALSO, PLEASE INCLUDE A DOCSTRING AT THE BEGINNING OF THIS FILE THAT 
# SAYS WHAT THE SCRIPT DOES AND WHO THE AUTHOR IS.


## Using for loops
# latin name lists
latin_name_loops = list()
for species in birds:
    latin_name_loops.append(species[0])
print(latin_name_loops)

# common name lists
common_name_loops = list()
for species in birds:
    common_name_loops.append(species[1])
print(common_name_loops)

# mean body mass lists
mean_body_masses_loops = list()
for species in birds:
    mean_body_masses_loops.append(species[2])
print(mean_body_masses_loops)



## Using list comprehensions
# latin name lists
latin_name_lc=list([species[0] for species in birds])
print(latin_name_lc)

# common name lists
common_name_lc=list([species[1] for species in birds])
print(common_name_lc)

# mean body masses lists
mean_body_masses_lc=list([species[2] for species in birds])
print(mean_body_masses_lc)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.01515s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/user/bin/env python3

""" This script is to test the function of is_an_oak, listing all of the species and finding the oak,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """

import csv
import sys
import doctest
import re
#Define function
def is_an_oak(name):
    
    """ find whether a species is an oak
    >>> is_an_oak('Fagus sylvatica')
    False
    
    >>> is_an_oak('quercus')
    True
    
    >>> is_an_oak('Quercus')
    True

    >>> is_an_oak('quercuss')
    False

    """  
  
    return name.lower().endswith("quercus",) #bug is wrong spelling of quercus/  ##improving non-strict match with regexp.
""" Returns True if name is starts with 'quercus' """ 
   
""" main function to find the oak and list the species"""
def main(argv): 
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Data/JustOaksData.csv','w')
    next(f)
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    csvwrite.writerow(["Ginus"," Species"])
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.04549s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************

""" This script demonstrate the list comprehension in python,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])

**********************************************************************

Code ran without errors

Time consumed = 0.01645s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
"""demomnstrate loops in python,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.61221s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************

#!/usr/bin/env python3
# Filename: using_name.py

""" This script is to explain the function of __name__ =  '__main__'
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself

**********************************************************************

Code ran without errors

Time consumed = 0.07875s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/user/bin/env python3
"""  This script is to input DNA sequence from ../Data/DNA_sequence file and out put result to another file,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """

# open file and read the sequence, removing the \n
with open("../Data/DNA_sequence.csv", "r") as f:
    seq1 = f.readline()
    seq2 = f.readline()
    seq1 = seq1.strip('\n')


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 


# output result to result directory align_seqs_result.txt file
with open ("../Result/align_seqs_result.txt","w") as f:
    print(my_best_align+"\n"+s1+"\n"+"Best score:", my_best_score, file=f)

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
  File "align_seqs.py", line 65
    print(my_best_align+"\n"+s1+"\n"+"Best score:", my_best_score, file=f)
                                                                       ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script is to explain system argument variable,
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk)"""
import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('This is the name of the script: ', 'sysargv.py')
('Number of arguments: ', 1)
('The arguments are: ', "['sysargv.py']")

**********************************************************************

Code ran without errors

Time consumed = 0.10159s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:
**********************************************************************
"""This script is to get sequence from different external file with sys.argv, and align the sequence
Author Wang YuHeng (yuheng.wang18@imperial.ac.uk) """


import sys
# making args a sys.args list but without first component
args = sys.argv[1:]

# default args with fasta files
if args == []:
    args.append("../Data/fasta/407228326.fasta")
    args.append("../Data/fasta/407228412.fasta")

f1 = args[0]
f2 = args[1]


# open file and read the sequence, removing the \n and first line
seq1 = ""
with open(f1, "r") as f:
    next(f)
    for line in f.readlines():
        line = line.strip()
        seq1 += line
        
seq2 = ""  
with open(f2, "r") as f:
    next(f)
    for line in f.readlines():
        line = line.strip()
        seq2 += line


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    # print("." * startpoint + matched)           
    # print("." * startpoint + s2)
    # print(s1)
    # print(score) 
    # print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 


print(my_best_align)
print(s1)
print("Best score:", my_best_score)

**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "align_seqs_fasta.py", line 22, in <module>
    for line in f.readlines():
ValueError: Mixing iteration and read methods would lose data

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" This script demonstrate the control flow in python,
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk) """


"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Wang YuHeng (yuheng.wang18@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
            #Print formatted text "%d %s %f %e" % (20,"30",0.0003,0.00003)

          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.01369s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

""" Doing unit test on control flow files
Author: Wang YuHeng (yuheng.wang18@imperial.ac.uk)  """

__author__ = 'Your Name (Your.Name@your.email.address)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK: WHY? #######

# def main(argv): 
#     print even_or_odd(22)
#     print even_or_odd(33)
#     return 0

# if (__name__ == "__main__"):
#     status = main(sys.argv)
############################################

doctest.testmod()   # To run with embedded tests**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.03862s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!